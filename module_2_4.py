# Задание "Слишком древний шифр"
# Ворота (выход из ловушки) с двумя каменными вставками для чисел.
# В первом поле камни с числом менялись постоянно (от 3 до 20) случайным образом.
# Составьте алгоритм, используя циклы, чтобы в независимости от случайного числа n (от 3 до 20) в первом поле
# программа выдавала нужный пароль result, для этого числа.
# Пароли для чисел от 3 до 20 (для сверки):
# 3 - 12
# 4 - 13
# 5 - 1423
# 6 - 121524
# 7 - 162534
# 8 - 13172635
# 9 - 1218273645
# 10 - 141923283746
# 11 - 11029384756
# 12 - 12131511124210394857
# 13 - 112211310495867
# 14 - 1611325212343114105968
# 15 - 1214114232133124115106978
# 16 - 1317115262143531341251161079
# 17 - 11621531441351261171089
# 18 - 12151811724272163631545414513612711810
# 19 - 118217316415514613712811910
# 20 - 13141911923282183731746416515614713812911

import random

# Задан список случайных чисел
first_field = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

# Генерируем случайное число из my_list
random_number = random.choice(first_field)
print(f"Случайное число (максимум для суммы): {random_number}")

# Создаём переменную для хранения подходящих пар пароля к случайному числу
result = []

# Используем цикл while для перебора всех пар чисел от 1 до 19
first_number = 1
while first_number < 20:
    second_number = first_number + 1  # Начинаем со следующего числа
    while second_number < 20:
        pair_sum = first_number + second_number  # Вычисляем сумму пары
        # Проверяем, не превышает ли сумма случайное число
        if  pair_sum <= random_number:
            # Проверяем, кратны ли сумма и случайное число
            if pair_sum % random_number == 0 or random_number % pair_sum == 0:
                # Добавляем пару в список
                result.append(f"{first_number}{second_number}")
        second_number += 1  # Переходим к следующему элементу
    first_number += 1  # Переходим к следующему элементу для первой пары

# Выводим пароль для прохода в виде всех подходящих пар в одной строке
if result:
    print("".join(result))